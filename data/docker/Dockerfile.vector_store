# Stage 1: Build the application with dependencies using Poetry
FROM python:3.12-slim AS vector-builder

# Install system dependencies for FAISS, Rust, and Cargo
RUN apt-get update && apt-get install -y \
    build-essential \
    libopenblas-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Rust and Cargo (for building tokenizers and other Rust-based packages)
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y
ENV PATH="/root/.cargo/bin:$PATH"

# Install Python dependencies
RUN pip install poetry

# Set working directory
WORKDIR /app

# Copy pyproject.toml and poetry.lock first to leverage Docker cache
COPY /embeddings/ /app/

# Install dependencies in a virtual environment created by Poetry
RUN poetry config virtualenvs.in-project true && poetry install --no-dev


# Stage 2: Create the final image to run the application
FROM python:3.12-slim

# Set working directory
WORKDIR /app

# Copy the virtual environment with dependencies from the builder stage
COPY --from=vector-builder /app/.venv /app/.venv

# Copy the application code from the builder stage
COPY --from=vector-builder /app/ /app/

# Set environment variables
ENV PATH="/app/.venv/bin:$PATH"
ENV VECTOR_STORE_DIR=/app/vector_store_data
RUN mkdir -p $VECTOR_STORE_DIR

# Command to run the embedding generation and vector store
CMD ["python", "generate_embeddings.py"]

# Add a new command to keep the container running after the script completes
CMD ["tail", "-f", "/dev/null"]
